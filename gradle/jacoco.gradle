apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.7.9"
}

configurations {
    jacocoTestReport
}

dependencies {
    jacocoTestReport 'org.jacoco:org.jacoco.ant:0.7.9'
    jacocoTestReport 'org.jacoco:org.jacoco.core:0.7.9'
}

android {
    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }
}

task jacocoTestReport(type: JacocoReport, dependsOn: ["${project['JACOCO_DEPENDENCY']}"]) {
    group = 'Reporting'
    description = 'Generate Jacoco coverage reports after running tests.'

    reports {
        xml {
            enabled true // coveralls
            File file = file("${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml")
            destination file
        }

        html {
            enabled true
            File file = file("${project.buildDir}/reports/jacoco/test/html")
            destination file
        }
    }

    // fix issue with double $$ at generate report task
    doFirst {
        applyDaggerWorkaround('app/build/intermediates/classes/')
    }
    // avoid some side effects through revert renaming
    doLast {
        revertDaggerWorkaround('app/build/intermediates/classes/')
        println "Report At: " + reportsDir + "/jacoco/test/html/index.html"
    }

    // use hidden configuration, for details look into JacocoPlugin.groovy
    jacocoClasspath = project.configurations['androidJacocoAnt']

    // exclude auto-generated classes and tests
    def fileFilter = JACOCO_FILE_FILTER.tokenize(",")

    def debugTree = fileTree(
            dir: "${project.buildDir}/${project['JACOCO_CLASS_DIR']}",
            excludes: fileFilter
    )

    def coverageSourceDirs = [
            "src/main/java",
            "src/qa/java",
            "src/internal/java",
    ]

    sourceDirectories = files([coverageSourceDirs])
    classDirectories = files([debugTree])

    executionData fileTree(project.buildDir).include('**/jacoco/*.exec')
            .include('**/code-coverage/**/coverage.ec')
}

def applyDaggerWorkaround(String pathWithDaggerClasses) {
    def filePath = new File(pathWithDaggerClasses)
    if (filePath.exists()) {
        filePath.eachFileRecurse { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }
}
def revertDaggerWorkaround(String pathWithDaggerClasses) {
    def filePath = new File(pathWithDaggerClasses)
    if (filePath.exists()) {
        filePath.eachFileRecurse { file ->
            if (file.name.contains('$ModuleAdapter')) {
                file.renameTo(file.path.replace('$ModuleAdapter', '$$ModuleAdapter'))
            }
        }
    }
}